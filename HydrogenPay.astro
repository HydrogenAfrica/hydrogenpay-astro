---
export interface Props {
	title?: string;
	description?: string;
	apiKey: string;
	currency: string;
	amount: number;
	email: string;
	customerName?: string;
	onSuccess?: any;
	onClose?: any;
	frequency?: number;
	meta?: any;
	isRecurring?: boolean;
	buttonText?: string;
	buttonStyle?: string;
	endDate?: string;
	transactionRef?: string;
	metaData?: Array<{ fieldName: string; fieldDefaultValue: string, fieldKey: string, fieldType: number }>;
}

const {
	title,
	description,
	apiKey,
	buttonStyle,
	currency,
	amount,
	email,
	customerName,
	meta,
	frequency,
	isRecurring,
	endDate,
	buttonText,
	transactionRef,
	metaData = []
} = Astro.props;

var onClose = Astro.props.onClose
var onSuccess = Astro.props.onSuccess;
---

<div class="astro-component">
	<script
		is:inline
		src="https://js.hydrogenpay.com/inline.js"
	></script>
	<button id="hydrogenPayButton">{buttonText || 'Pay Now'}</button>

	<script
		is:inline
		define:vars={{
			title,
			description,
			apiKey,
			buttonStyle,
			currency,
			amount,
			email,
			customerName,
			meta,
			frequency,
			isRecurring,
			endDate,
			onClose,
			onSuccess,
			buttonText,
			transactionRef,
			metaData
		}}
	>

			const button = document.getElementById('hydrogenPayButton');
			if (!button) {
				console.error('hydrogenPayButton element not found!');
				return;
			}

			button.addEventListener('click', async function hydrogenPay() {
				let checkStatus;

				// Initialize payment
				const getRef = window.handlePgData(
					{
						currency: currency,
						amount: amount,
						email: email,
						description: description,
						customerName: customerName,
						meta: meta,
						frequency: frequency,
						isAPI: false,
						...(isRecurring && endDate ? { endDate: endDate } : {}),
						transactionRef,
						metaData: metaData
					},
					apiKey,
					(e) => {
						if (window?.onHydrogenPayClose) {
							window?.onHydrogenPayClose(e);
						}
						clearInterval(checkStatus);
					}
				);

				// Get payment reference
				const getTransactionRef = await getRef;

				if (
					getTransactionRef &&
					getTransactionRef !== 'Error in initiating payment'
				) {
					checkStatus = setInterval(async function () {
						const checkPaymentStatus = await window.handlePaymentStatus(
						getTransactionRef,
							apiKey
						);

						if (checkPaymentStatus.status === 'Paid') {
							if (window?.onHydrogenPaySuccess) {
								window?.onHydrogenPaySuccess(checkPaymentStatus, () =>
									window.closeModal({ getTransactionRef })
								);
							}
							clearInterval(checkStatus);
						}
					}, 2000);
				} else {
					console.error(`ERROR: ${getTransactionRef}`);
				}
			});
	</script>
</div>
